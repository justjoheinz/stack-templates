{-# START_FILE package.yaml #-}
name:                {{name}}
version:             0.1.0
github:              "{{github-username}}{{^github-username}}githubuser{{/github-username}}/{{name}}"
license:             BSD3
author:              "{{author-name}}{{^author-name}}Author name here{{/author-name}}"
maintainer:          "{{author-email}}{{^author-email}}example@example.com{{/author-email}}"
copyright:           "{{copyright}}{{^copyright}}{{year}}{{^year}}2022{{/year}} {{author-name}}{{^author-name}}Author name here{{/author-name}}{{/copyright}}"
language:            dGHC2021

extra-source-files:
- README.md
- Dockerfile
- Makefile


# Metadata used when publishing your package
# synopsis:            Short description of your package
# category:            {{category}}{{^category}}Web{{/category}}

# To avoid duplicated efforts in documentation and dealing with the
# complications of embedding Haddock markup inside cabal files, it is
# common to point users to the README.md file.
description:         Please see the README on GitHub at <https://github.com/{{github-username}}{{^github-username}}githubuser{{/github-username}}/{{name}}#readme>


dependencies:
- base >= 4.7 && < 5
- aws-lambda-haskell-runtime >= 4.1.1
- safe-exceptions-checked >= 0.1.0
- aeson

library:
  source-dirs: src

executables:
  bootstrap:
    main:                Main.hs
    source-dirs:         app
    ghc-options:
    - -threaded
    - -rtsopts
    - -O2
    - -with-rtsopts=-N
    dependencies:
    - {{name}}

default-extensions:
  - RecordWildCards
  - OverloadedLists
  - OverloadedStrings
  - DeriveGeneric

{-# START_FILE Setup.hs #-}
import Distribution.Simple
main = defaultMain

{-# START_FILE Makefile #-}
all:
	# You can then tag the image and upload it to a registry of your choice
	@docker build . -t my-haskell-lambda-image

{-# START_FILE src/Lib.hs #-}
module Lib where

import GHC.Generics
import Data.Aeson
import Aws.Lambda

data Person = Person
  { personName :: String
  , personAge :: Int
  } deriving (Generic)

instance FromJSON Person
instance ToJSON Person

handler :: Person -> Context () -> IO (Either String Person)
handler person context =
  if personAge person > 0 then
    return (Right person)
  else
    return (Left "A person's age must be positive")

{-# START_FILE Dockerfile #-}
ARG OUTPUT_DIR=/root/output
ARG EXECUTABLE_NAME=bootstrap

FROM lambci/lambda:build-provided as build

COPY . .

SHELL ["/bin/bash", "--rcfile", "~/.profile", "-c"]

USER root

# Installing Haskell Stack
RUN curl -sSL https://get.haskellstack.org/ | sh

# Build the lambda
COPY . /root/lambda-function/

RUN pwd

RUN cd /root/lambda-function
WORKDIR /root/lambda-function/

RUN ls

RUN stack clean --full
RUN stack build

ARG OUTPUT_DIR

RUN mkdir -p ${OUTPUT_DIR} && \
    mkdir -p ${OUTPUT_DIR}/lib

ARG EXECUTABLE_NAME

RUN cp $(stack path --local-install-root)/bin/${EXECUTABLE_NAME} ${OUTPUT_DIR}/${EXECUTABLE_NAME}

ENTRYPOINT sh

FROM public.ecr.aws/lambda/provided:al2 as deploy

ARG EXECUTABLE_NAME

WORKDIR ${LAMBDA_RUNTIME_DIR}

ARG OUTPUT_DIR

COPY --from=build ${OUTPUT_DIR} .

RUN ls
RUN mv ${EXECUTABLE_NAME} bootstrap || true
RUN ls

CMD [ "handler" ]

{-# START_FILE stack-9.8.4.yaml #-}
resolver: lts-23.28  # GHC 9.8.4

packages:
- .

extra-deps:
- aws-lambda-haskell-runtime-4.1.1
- safe-exceptions-checked-0.1.0

{-# START_FILE stack-9.6.7.yaml #-}
resolver: lts-22.44  # GHC 9.6.7

packages:
- .

extra-deps:
- aws-lambda-haskell-runtime-4.1.1
- safe-exceptions-checked-0.1.0

{-# START_FILE app/Main.hs #-}
module Main where

import Aws.Lambda
import qualified Lib

main :: IO ()
main =
  runLambdaHaskellRuntime
    defaultDispatcherOptions
    (pure ())
    id
    (addStandaloneLambdaHandler "handler" Lib.handler)
{-# START_FILE README.md #-}
# {{name}}

{-# START_FILE LICENSE #-}
Copyright {{author-name}}{{^author-name}}Author name here{{/author-name}} (c) {{year}}{{^year}}2018{{/year}}

All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:

    * Redistributions of source code must retain the above copyright
      notice, this list of conditions and the following disclaimer.

    * Redistributions in binary form must reproduce the above
      copyright notice, this list of conditions and the following
      disclaimer in the documentation and/or other materials provided
      with the distribution.

    * Neither the name of {{author-name}}{{^author-name}}Author name here{{/author-name}} nor the names of other
      contributors may be used to endorse or promote products derived
      from this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
"AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

{-# START_FILE .gitignore #-}
.stack-work/
build/
*~
.DS_Store
TAGS
